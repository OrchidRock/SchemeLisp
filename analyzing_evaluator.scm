;:
;: Separating syntactic analysis from execution.
;:

(load "environment.scm")
(load "grammars.scm")
(load "debug_print.scm")

(define (eval expr env)
    ;(let ((analyzed-proc (analyze expr)))
        ;(print-analyze "analyzed: " analyzed-proc)
        ((analyze expr) env))

(define (analyze expr)
  (cond ((self-evaluating? expr)
            (analyze-self-evaluating expr))
        ((quoted? expr) (analyze-quoted expr))
        ((variable? expr) (analyze-variable expr))
        ((assignment? expr) (analyze-assignment expr))
        ((definition? expr) (analyze-definition expr))
        ((if? expr) (analyze-if expr))
        ((lambda? expr) (analyze-lambda expr))
        ((begin? expr) (analyze-sequence (begin-actions expr)))
        ((cond? expr) (analyze (cond->if expr)))
        ((let? expr) (analyze-let expr))
        ((unless? expr) (analyze (unless->if expr)))
        ((application? expr) (analyze-application expr))
        (else
         (error-report "Unknown exprression type -- ANALYZE" expr))))

(define (print-analyze msg . objects)
    (display-debug msg)
    (if (null? objects)
        'ok
        (display-debug objects))
    (newline-debug))

(define (analyze-self-evaluating expr)
    (print-analyze "Analyze-self-evaluating <=> " expr)
    (lambda (env) expr))

(define (analyze-quoted expr)
    (print-analyze "Before analyze-quoted => " expr)
    (let ((qval (text-of-quotation expr)))
        (print-analyze "=> After analyze-quoted: lambda (env)" qval)
        (lambda (env) qval)))

(define (analyze-variable expr)
    (print-analyze "Analyze-variable <=> " expr)
    ;(let ((val (lookup-variable-value expr env)))
        ;(print-analyze "analyze-variable: lambda (env)" val)
    (lambda (env) (lookup-variable-value expr env)))

(define (analyze-assignment expr)
    (print-analyze "Before analyze-assignment => " expr)
    (let ((var (assignment-variable expr))
          (vproc (analyze (assignment-value expr))))
        (print-analyze "=> After analyze-assignment: lambda (env) " var vproc)
        (lambda (env)
            (set-variable-value! var (vproc env) env)
            'ok)))

(define (analyze-definition expr)
    (print-analyze "Before analyze-definition => " expr)
    (let ((var (definition-variable expr))
          (vproc (analyze (definition-value expr))))
        (print-analyze "=> After analyze-definition: lambda (env) " var vproc)
        (lambda (env)
            (define-variable! var (vproc env) env))))

(define (analyze-if expr)
    (print-analyze "Before analyze-if => " expr)
    (let ((pproc (analyze (if-predicate expr)))
          (cproc (analyze (if-consequent expr)))
          (aproc (analyze (if-alternative expr))))
        (print-analyze "=> After analyze-if: lambda (env) " pproc cproc aproc)
        (lambda (env)
            (if (true? (pproc env))
                (cproc env)
                (aproc env)))))

(define (analyze-lambda expr)
    (print-analyze "Before analyze-lambda => " expr)
    (let ((vars (lambda-parameters expr))
          (bproc (analyze-sequence (lambda-body expr))))
        (print-analyze "=> After analyze-lambda: lambda (env) " vars bproc)
        (lambda (env) (make-procedure vars bproc env))))


(define (analyze-sequence exprs)
    (print-analyze "Before analyze-sequence => " exprs)
    (define (sequentially proc1 proc2)
        (lambda (env) (proc1 env) (proc2 env)))
    (define (loop first-proc rest-procs)
        (print-analyze "  analyze-sequence loop => first-proc: " first-proc)
        (if (null? rest-procs)
            (begin (print-analyze "=> After analyze-sequence: " first-proc)
                first-proc)
            (loop (sequentially first-proc (car rest-procs))
                  (cdr rest-procs))))
    (let ((procs (map analyze exprs)))
        (print-analyze  "  Before analyze-sequence loop => " procs)
        (if (null? procs)
            (error-report "Empty sequence -- ANALYZE"))
        (loop (car procs) (cdr procs))))

(define (analyze-let expr)
    (print-analyze "Before analyze-let => " expr)
    (let ((proc (analyze (let->combination expr))))
        (print-analyze "=> After analyze-let: lambda (env) " proc)
        (lambda (env) (proc env))))

(define (analyze-application expr)
    (print-analyze "Before analyze-application => " expr)
    (let ((fproc (analyze (operator expr)))
          (aprocs (map analyze (operands expr))))
        (print-analyze "=> After analyze-application: lambda (env) " fproc aprocs)
        (lambda (env)
            (execute-application (fproc env)
                                 (map (lambda (aproc) (aproc env))
                                    aprocs)))))

(define (execute-application proc args)
    (print-analyze "Execute-application => ... ")
    (cond ((primitive-procedure? proc)
            (apply-primitive-procedure proc args))
          ((compound-procedure? proc)
            ((procedure-body proc)
             (extend-environment (procedure-parameters proc)
                                 args
                                 (procedure-environment proc))))
         (else
            (error-report "Unknown procedure type -- EXECUTE-APPLICATION" proc))))


(define input-prompt ";;; M-Analyze-Eval input:")
(define output-prompt ";;; M-Analyze-Eval value:")

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print-output output)))
  (driver-loop))

(define the-global-environment (setup-environment))
(driver-loop)
